<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE entry SYSTEM "SamplesInfo.dtd">
<entry>
  <name>simpleP2P</name>
  <cuda_api_list>
    <toolkit>cudaDeviceEnablePeerAccess</toolkit>
    <toolkit>cudaFree</toolkit>
    <toolkit>cudaEventRecord</toolkit>
    <toolkit>cudaMallocHost</toolkit>
    <toolkit>cudaGetDeviceCount</toolkit>
    <toolkit>cudaEventElapsedTime</toolkit>
    <toolkit>cudaDeviceSynchronize</toolkit>
    <toolkit>cudaEventSynchronize</toolkit>
    <toolkit>cudaFreeHost</toolkit>
    <toolkit>cudaMalloc</toolkit>
    <toolkit>cudaEventCreateWithFlags</toolkit>
    <toolkit>cudaDeviceCanAccessPeer</toolkit>
    <toolkit>cudaEventDestroy</toolkit>
    <toolkit>cudaSetDevice</toolkit>
    <toolkit>cudaDeviceDisablePeerAccess</toolkit>
    <toolkit>cudaMemcpy</toolkit>
    <toolkit>cudaGetDeviceProperties</toolkit>
  </cuda_api_list>
  <description><![CDATA[This application demonstrates CUDA APIs that support Peer-To-Peer (P2P) copies, Peer-To-Peer (P2P) addressing, and Unified Virtual Memory Addressing (UVA) between multiple GPUs. In general, P2P is supported between two same GPUs with some exceptions, such as some Tesla and Quadro GPUs.]]></description>
  <devicecompilation>whole</devicecompilation>
  <includepaths>
    <path>./</path>
    <path>../</path>
    <path>../../../Common</path>
  </includepaths>
  <keyconcepts>
    <concept level="basic">Performance Strategies</concept>
    <concept level="basic">Asynchronous Data Transfers</concept>
    <concept level="basic">Unified Virtual Address Space</concept>
    <concept level="basic">Peer to Peer Data Transfers</concept>
    <concept level="basic">Multi-GPU</concept>
  </keyconcepts>
  <keywords>
    <keyword>CUDA</keyword>
    <keyword>Performance</keyword>
    <keyword>multi-GPU support</keyword>
    <keyword>peer to peer</keyword>
  </keywords>
  <libraries>
  </libraries>
  <librarypaths>
  </librarypaths>
  <nsight_eclipse>true</nsight_eclipse>
  <primary_file>simpleP2P.cu</primary_file>
  <required_dependencies>
    <dependency>only-64-bit</dependency>
  </required_dependencies>
  <scopes>
    <scope>1:CUDA Basic Topics</scope>
    <scope>1:Performance Strategies</scope>
  </scopes>
  <sm-arch>sm35</sm-arch>
  <sm-arch>sm37</sm-arch>
  <sm-arch>sm50</sm-arch>
  <sm-arch>sm52</sm-arch>
  <sm-arch>sm53</sm-arch>
  <sm-arch>sm60</sm-arch>
  <sm-arch>sm61</sm-arch>
  <sm-arch>sm70</sm-arch>
  <sm-arch>sm72</sm-arch>
  <sm-arch>sm75</sm-arch>
  <sm-arch>sm80</sm-arch>
  <sm-arch>sm86</sm-arch>
  <sm-arch>sm87</sm-arch>
  <supported_envs>
    <env>
      <arch>x86_64</arch>
      <platform>linux</platform>
    </env>
    <env>
      <platform>windows7</platform>
    </env>
    <env>
      <arch>ppc64le</arch>
      <platform>linux</platform>
    </env>
  </supported_envs>
  <supported_sm_architectures>
    <include>all</include>
  </supported_sm_architectures>
  <title>Simple Peer-to-Peer Transfers with Multi-GPU</title>
  <type>exe</type>
</entry>
